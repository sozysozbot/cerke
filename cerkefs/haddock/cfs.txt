-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on Github at
--   <a>https://github.com/sozysozbot/cerke/tree/cfs/cfs#readme</a>
@package cfs
@version 0.4.0.0

module CerkeFS.Piece2
data Color
Kok1 :: Color
Huok2 :: Color
data Side
Upward :: Side
Downward :: Side
data Piece
Tam2 :: Piece
Piece :: Color -> Profession -> Side -> Piece
[color] :: Piece -> Color
[prof] :: Piece -> Profession
[side] :: Piece -> Side
data Profession
Nuak1 :: Profession
Kauk2 :: Profession
Gua2 :: Profession
Kaun1 :: Profession
Dau2 :: Profession
Maun1 :: Profession
Kua2 :: Profession
Tuk2 :: Profession
Uai1 :: Profession
Io :: Profession
profToLin :: Profession -> Char
type ProfOrTam = Either () Profession
flipSide :: Piece -> Maybe Piece
type PhantomPiece = (Color, Profession, Side)
match :: PhantomPiece -> Piece -> Bool
getSide :: Piece -> Maybe Side
getProf :: Piece -> Maybe Profession
toPhantom :: Piece -> Maybe PhantomPiece
船 :: Profession
兵 :: Profession
弓 :: Profession
車 :: Profession
虎 :: Profession
馬 :: Profession
筆 :: Profession
巫 :: Profession
将 :: Profession
王 :: Profession
黒 :: Color
赤 :: Color
instance GHC.Classes.Ord CerkeFS.Piece2.Piece
instance GHC.Classes.Eq CerkeFS.Piece2.Piece
instance GHC.Show.Show CerkeFS.Piece2.Piece
instance GHC.Enum.Enum CerkeFS.Piece2.Profession
instance GHC.Classes.Ord CerkeFS.Piece2.Profession
instance GHC.Classes.Eq CerkeFS.Piece2.Profession
instance GHC.Show.Show CerkeFS.Piece2.Profession
instance GHC.Classes.Ord CerkeFS.Piece2.Side
instance GHC.Classes.Eq CerkeFS.Piece2.Side
instance GHC.Show.Show CerkeFS.Piece2.Side
instance GHC.Classes.Ord CerkeFS.Piece2.Color
instance GHC.Classes.Eq CerkeFS.Piece2.Color
instance GHC.Show.Show CerkeFS.Piece2.Color

module CerkeFS.Piece3
data Color
Kok1 :: Color
Huok2 :: Color
data Side
Upward :: Side
Downward :: Side
data Piece
data Profession
Nuak1 :: Profession
Kauk2 :: Profession
Gua2 :: Profession
Kaun1 :: Profession
Dau2 :: Profession
Maun1 :: Profession
Kua2 :: Profession
Tuk2 :: Profession
Uai1 :: Profession
Io :: Profession
profToLin :: Profession -> Char
type ProfOrTam = Either () Profession
flipSide :: Piece -> Maybe Piece
type PhantomPiece = (Color, Profession, Side)
match :: PhantomPiece -> Piece -> Bool
getSide :: Piece -> Maybe Side
getProf :: Piece -> Maybe Profession
toPhantom :: Piece -> Maybe PhantomPiece
船 :: Profession
兵 :: Profession
弓 :: Profession
車 :: Profession
虎 :: Profession
馬 :: Profession
筆 :: Profession
巫 :: Profession
将 :: Profession
王 :: Profession
黒 :: Color
赤 :: Color

module CerkeFS.Board
data Col
CK :: Col
CL :: Col
CN :: Col
CT :: Col
CZ :: Col
CX :: Col
CC :: Col
CM :: Col
CP :: Col
data Row
RA :: Row
RE :: Row
RI :: Row
RU :: Row
RO :: Row
RY :: Row
RAI :: Row
RAU :: Row
RIA :: Row
data Square
Square :: Row -> Col -> Square
[row] :: Square -> Row
[col] :: Square -> Col
type Board1 = Map Square Piece
data Vec
Vec :: Int -> Int -> Vec
[dx] :: Vec -> Int
[dy] :: Vec -> Int
putPiece :: Piece -> Square -> Board1 -> M Board1
removePiece :: Square -> Board1 -> M (Piece, Board1)
movePiece :: Vec -> Square -> Board1 -> M Board1
movePieceFromTo :: Square -> Square -> Board1 -> M (Maybe Side, Board1)
movePieceFromToProf :: Square -> Square -> Board1 -> M (Maybe PhantomPiece, Board1)
data Error
AlreadyOccupied :: Square -> Error
EmptySquare :: Square -> Error
OutOfBoard :: Error
TamCapture :: Error
NoCorrespondingPieceInHand :: Error
MovingOpponentPiece :: Error
FriendlyFire :: Error
AmbiguousColor :: Error
WrongProfessionSpecified :: Maybe Profession -> Maybe Profession -> Error
[expected] :: Error -> Maybe Profession
[specified] :: Error -> Maybe Profession
type M = Either Error
toEither :: c -> Maybe a -> Either c a
instance GHC.Classes.Ord CerkeFS.Board.Error
instance GHC.Classes.Eq CerkeFS.Board.Error
instance GHC.Show.Show CerkeFS.Board.Error
instance GHC.Classes.Ord CerkeFS.Board.Square
instance GHC.Classes.Eq CerkeFS.Board.Square
instance GHC.Enum.Enum CerkeFS.Board.Row
instance GHC.Classes.Ord CerkeFS.Board.Row
instance GHC.Classes.Eq CerkeFS.Board.Row
instance GHC.Show.Show CerkeFS.Board.Row
instance GHC.Enum.Enum CerkeFS.Board.Col
instance GHC.Classes.Ord CerkeFS.Board.Col
instance GHC.Classes.Eq CerkeFS.Board.Col
instance GHC.Show.Show CerkeFS.Board.Col
instance GHC.Show.Show CerkeFS.Board.Square

module CerkeFS.PrettyPrint
loadBoard :: String -> Maybe Board1
drawBoard :: Board1 -> String
initialBoard :: Board1
sqKA :: Square
sqLA :: Square
sqNA :: Square
sqTA :: Square
sqZA :: Square
sqXA :: Square
sqCA :: Square
sqMA :: Square
sqPA :: Square
sqKE :: Square
sqLE :: Square
sqNE :: Square
sqTE :: Square
sqZE :: Square
sqXE :: Square
sqCE :: Square
sqME :: Square
sqPE :: Square
sqKI :: Square
sqLI :: Square
sqNI :: Square
sqTI :: Square
sqZI :: Square
sqXI :: Square
sqCI :: Square
sqMI :: Square
sqPI :: Square
sqKU :: Square
sqLU :: Square
sqNU :: Square
sqTU :: Square
sqZU :: Square
sqXU :: Square
sqCU :: Square
sqMU :: Square
sqPU :: Square
sqKO :: Square
sqLO :: Square
sqNO :: Square
sqTO :: Square
sqZO :: Square
sqXO :: Square
sqCO :: Square
sqMO :: Square
sqPO :: Square
sqKY :: Square
sqLY :: Square
sqNY :: Square
sqTY :: Square
sqZY :: Square
sqXY :: Square
sqCY :: Square
sqMY :: Square
sqPY :: Square
sqKAI :: Square
sqLAI :: Square
sqNAI :: Square
sqTAI :: Square
sqZAI :: Square
sqXAI :: Square
sqCAI :: Square
sqMAI :: Square
sqPAI :: Square
sqKAU :: Square
sqLAU :: Square
sqNAU :: Square
sqTAU :: Square
sqZAU :: Square
sqXAU :: Square
sqCAU :: Square
sqMAU :: Square
sqPAU :: Square
sqKIA :: Square
sqLIA :: Square
sqNIA :: Square
sqTIA :: Square
sqZIA :: Square
sqXIA :: Square
sqCIA :: Square
sqMIA :: Square
sqPIA :: Square

module CerkeFS.GameState
data Fullboard
Fullboard :: Board1 -> [Piece] -> Fullboard
[board] :: Fullboard -> Board1
[hand] :: Fullboard -> [Piece]
playFromStart :: Monad m => StateT Fullboard m a -> m Fullboard
initialBoard :: Board1
plays :: Square -> Square -> Side -> StateT Fullboard M ()
drops :: (Color, Profession) -> Square -> Side -> StateT Fullboard M ()
passes :: Side -> StateT Fullboard M ()
drops' :: Profession -> Square -> Side -> StateT Fullboard M ()
mun1 :: (Side -> StateT Fullboard M ()) -> Side -> StateT Fullboard M ()
plays' :: Square -> Profession -> Square -> Side -> StateT Fullboard M ()
playsTam :: Square -> Square -> Side -> StateT Fullboard M ()
