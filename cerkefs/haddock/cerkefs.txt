-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on Github at
--   <a>https://github.com/sozysozbot/cerke/tree/cfs/cfs#readme</a>
@package cerkefs
@version 0.5.7.1

module CerkeFS.Internal.Piece2
data Color

-- | Red, 赤
Kok1 :: Color

-- | Black, 黒
Huok2 :: Color
data Side

-- | Pieces that points upward. Denoted by <tt>^</tt> in the ASCII
--   notation.
Upward :: Side

-- | Pieces that points downward. Denoted by <tt>_</tt> in the ASCII
--   notation.
Downward :: Side
data Piece

-- | Minds, 皇, tam
Tam2 :: Piece
Piece :: Color -> Profession -> Side -> Piece

-- | The color of the piece
[color] :: Piece -> Color

-- | The profession of the piece
[prof] :: Piece -> Profession

-- | The side that the piece belongs to
[side] :: Piece -> Side
data Profession

-- | Vessel, 船, felkana
Nuak1 :: Profession

-- | Pawn, 兵, elmer
Kauk2 :: Profession

-- | Rook, 弓, gustuer
Gua2 :: Profession

-- | Bishop, 車, vadyrd
Kaun1 :: Profession

-- | Tiger, 虎, stistyst
Dau2 :: Profession

-- | Horse, 馬, dodor
Maun1 :: Profession

-- | Clerk, 筆, kua
Kua2 :: Profession

-- | Shaman, 巫, terlsk
Tuk2 :: Profession

-- | General, 将, varxle
Uai1 :: Profession

-- | King, 王, ales
Io :: Profession
instance GHC.Classes.Ord CerkeFS.Internal.Piece2.Piece
instance GHC.Classes.Eq CerkeFS.Internal.Piece2.Piece
instance GHC.Show.Show CerkeFS.Internal.Piece2.Piece
instance GHC.Enum.Enum CerkeFS.Internal.Piece2.Profession
instance GHC.Classes.Ord CerkeFS.Internal.Piece2.Profession
instance GHC.Classes.Eq CerkeFS.Internal.Piece2.Profession
instance GHC.Show.Show CerkeFS.Internal.Piece2.Profession
instance GHC.Classes.Ord CerkeFS.Internal.Piece2.Side
instance GHC.Classes.Eq CerkeFS.Internal.Piece2.Side
instance GHC.Show.Show CerkeFS.Internal.Piece2.Side
instance GHC.Classes.Ord CerkeFS.Internal.Piece2.Color
instance GHC.Classes.Eq CerkeFS.Internal.Piece2.Color
instance GHC.Show.Show CerkeFS.Internal.Piece2.Color

module CerkeFS.Piece3
data Color

-- | Red, 赤
Kok1 :: Color

-- | Black, 黒
Huok2 :: Color
data Side

-- | Pieces that points upward. Denoted by <tt>^</tt> in the ASCII
--   notation.
Upward :: Side

-- | Pieces that points downward. Denoted by <tt>_</tt> in the ASCII
--   notation.
Downward :: Side
data Piece
data Profession

-- | Vessel, 船, felkana
Nuak1 :: Profession

-- | Pawn, 兵, elmer
Kauk2 :: Profession

-- | Rook, 弓, gustuer
Gua2 :: Profession

-- | Bishop, 車, vadyrd
Kaun1 :: Profession

-- | Tiger, 虎, stistyst
Dau2 :: Profession

-- | Horse, 馬, dodor
Maun1 :: Profession

-- | Clerk, 筆, kua
Kua2 :: Profession

-- | Shaman, 巫, terlsk
Tuk2 :: Profession

-- | General, 将, varxle
Uai1 :: Profession

-- | King, 王, ales
Io :: Profession

-- | Flip the side that the piece belongs to, or <a>Nothing</a> if
--   <a>Tam2</a>.
flipSide :: Piece -> Maybe Piece
type PhantomPiece = (Color, Profession, Side)  Not a physical piece; only serves to be a template

-- | Gets the side that the piece belongs to.
getSide :: Piece -> Maybe Side

-- | Converts <a>Piece</a> into <a>PhantomPiece</a>.
toPhantom :: Piece -> Maybe PhantomPiece

-- | An alias for <a>Nuak1</a>.
船 :: Profession

-- | An alias for <a>Kauk2</a>.
兵 :: Profession

-- | An alias for <a>Gua2</a>.
弓 :: Profession

-- | An alias for <a>Kaun1</a>.
車 :: Profession

-- | An alias for <a>Dau2</a>.
虎 :: Profession

-- | An alias for <a>Maun1</a>.
馬 :: Profession

-- | An alias for <a>Kua2</a>.
筆 :: Profession

-- | An alias for <a>Tuk2</a>.
巫 :: Profession

-- | An alias for <a>Uai1</a>.
将 :: Profession

-- | An alias for <a>Io</a>.
王 :: Profession

-- | An alias for <a>Huok2</a>.
黒 :: Color

-- | An alias for <a>Kok1</a>.
赤 :: Color

-- | An alias for <a>Nothing</a>, that is, <tt><a>toPhantom</a> Tam2</tt>.
phantomTam :: Maybe PhantomPiece

module CerkeFS.Internal.Board
data Col
ColumnK :: Col
ColumnL :: Col
ColumnN :: Col
ColumnT :: Col
ColumnZ :: Col
ColumnX :: Col
ColumnC :: Col
ColumnM :: Col
ColumnP :: Col
data Row
RowA :: Row
RowE :: Row
RowI :: Row
RowU :: Row
RowO :: Row
RowY :: Row
RowAI :: Row
RowAU :: Row
RowIA :: Row
data Square
Square :: Row -> Col -> Square
[row] :: Square -> Row
[col] :: Square -> Col
type Board1 = Map Square Piece
data Vec
Vec :: Int -> Int -> Vec
[dx] :: Vec -> Int
[dy] :: Vec -> Int

-- | Puts a piece on a square. Fails with <a>AlreadyOccupied</a> if already
--   occupied.
putPiece :: Piece -> Square -> Board1 -> Either Error Board1

-- | Removes a piece. Fails with <a>EmptySquare</a> if the specified square
--   is empty.
removePiece :: Square -> Board1 -> Either Error (Piece, Board1)

-- | Moves a piece on a square according to the vector. Raises:
--   
--   <ul>
--   <li><tt>OutOfBoard</tt> if the piece goes out of the board</li>
--   <li><a>EmptySquare</a> if the original square is empty</li>
--   <li><a>AlreadyOccupied</a> if the resulting square is already
--   occupied</li>
--   </ul>
--   
--   Moves a piece from a square to a square, returning the phantom version
--   of the piece that was moved. Raises:
--   
--   <ul>
--   <li><a>EmptySquare</a> if the original square is empty</li>
--   <li><a>AlreadyOccupied</a> if the resulting square is already
--   occupied</li>
--   </ul>
movePieceFromToFull :: Square -> Square -> Board1 -> Either Error (Maybe PhantomPiece, Board1)
data Error

-- | The square you're moving to is already occupied.
AlreadyOccupied :: Square -> Error

-- | The square you're moving from is actually empty
EmptySquare :: Square -> Error

-- | The square you're moving to is already occupied by Tam2.
TamCapture :: Error

-- | You tried to drop a piece that is not in the hand.
NoCorrespondingPieceInHand :: Error

-- | You tried to move the opponent's piece.
MovingOpponentPiece :: Error

-- | You tried to capture your own piece.
FriendlyFire :: Error

-- | Color of the dropped piece cannot be unambiguously inferred.
AmbiguousColor :: Error

-- | The actual profession differs from the expectation.
WrongProfessionSpecified :: Maybe Profession -> Maybe Profession -> Error
[expected] :: Error -> Maybe Profession
[specified] :: Error -> Maybe Profession

-- | Declares a Dat2 whose condition is not satisfied.
FalseDeclaration :: Error

-- | Tried to take a piece protected by Tam2HueAUai1
Tam2HueAUai1Violation :: Error

-- | Tried to step on an empty square
SteppingEmptySquare :: Square -> Error

-- | Trying a movement that the profession does not allow
ProfessionPrivilegeExceeded :: Profession -> Square -> Error

-- | Trying to capture a piece by Tam2
CaptureByTam :: Error

-- | Trying a movement that the Tam2 cannot do
Tam2PrivilegeExceeded :: Square -> (Maybe Square) -> Square -> Error
[_from] :: Error -> Square
[_thru] :: Error -> (Maybe Square)
[_to] :: Error -> Square

-- | Add a vector to the square to get a new square. <a>Nothing</a> if it
--   goes out of the board.
add :: Vec -> Square -> Maybe Square

-- | Takes the difference of two squares as a vec. <tt>p <a>minus</a>
--   q</tt> is p minus q.
minus :: Square -> Square -> Vec
getNeighborsAndSelf :: Square -> [Square]
getNeighbors :: Square -> [Square]
sqKA :: Square
sqLA :: Square
sqNA :: Square
sqTA :: Square
sqZA :: Square
sqXA :: Square
sqCA :: Square
sqMA :: Square
sqPA :: Square
sqKE :: Square
sqLE :: Square
sqNE :: Square
sqTE :: Square
sqZE :: Square
sqXE :: Square
sqCE :: Square
sqME :: Square
sqPE :: Square
sqKI :: Square
sqLI :: Square
sqNI :: Square
sqTI :: Square
sqZI :: Square
sqXI :: Square
sqCI :: Square
sqMI :: Square
sqPI :: Square
sqKU :: Square
sqLU :: Square
sqNU :: Square
sqTU :: Square
sqZU :: Square
sqXU :: Square
sqCU :: Square
sqMU :: Square
sqPU :: Square
sqKO :: Square
sqLO :: Square
sqNO :: Square
sqTO :: Square
sqZO :: Square
sqXO :: Square
sqCO :: Square
sqMO :: Square
sqPO :: Square
sqKY :: Square
sqLY :: Square
sqNY :: Square
sqTY :: Square
sqZY :: Square
sqXY :: Square
sqCY :: Square
sqMY :: Square
sqPY :: Square
sqKAI :: Square
sqLAI :: Square
sqNAI :: Square
sqTAI :: Square
sqZAI :: Square
sqXAI :: Square
sqCAI :: Square
sqMAI :: Square
sqPAI :: Square
sqKAU :: Square
sqLAU :: Square
sqNAU :: Square
sqTAU :: Square
sqZAU :: Square
sqXAU :: Square
sqCAU :: Square
sqMAU :: Square
sqPAU :: Square
sqKIA :: Square
sqLIA :: Square
sqNIA :: Square
sqTIA :: Square
sqZIA :: Square
sqXIA :: Square
sqCIA :: Square
sqMIA :: Square
sqPIA :: Square

-- | The list of squares, arranged in the following order:
--   <tt>[<a>sqKA</a>, <a>sqLA</a>, <a>sqNA</a> ... <a>sqCIA</a>,
--   <a>sqMIA</a>, <a>sqPIA</a>]</tt>.
sqList :: [Square]

-- | Checks whether the piece on a given square is a Tam2HueAUai1 that
--   belong to the side.
isTam2HueAUai1 :: Side -> Board1 -> Square -> Bool

-- | Returns whether the square is occupied
isOccupied :: Square -> Board1 -> Bool

-- | Checks whether a given square is in Tam2Hue.
isTam2Hue :: Board1 -> Square -> Bool
isNeighborOf :: Square -> Square -> Bool
instance GHC.Classes.Ord CerkeFS.Internal.Board.Error
instance GHC.Classes.Eq CerkeFS.Internal.Board.Error
instance GHC.Show.Show CerkeFS.Internal.Board.Error
instance GHC.Classes.Ord CerkeFS.Internal.Board.Vec
instance GHC.Classes.Eq CerkeFS.Internal.Board.Vec
instance GHC.Show.Show CerkeFS.Internal.Board.Vec
instance GHC.Classes.Ord CerkeFS.Internal.Board.Square
instance GHC.Classes.Eq CerkeFS.Internal.Board.Square
instance GHC.Enum.Enum CerkeFS.Internal.Board.Row
instance GHC.Classes.Ord CerkeFS.Internal.Board.Row
instance GHC.Classes.Eq CerkeFS.Internal.Board.Row
instance GHC.Show.Show CerkeFS.Internal.Board.Row
instance GHC.Enum.Enum CerkeFS.Internal.Board.Col
instance GHC.Classes.Ord CerkeFS.Internal.Board.Col
instance GHC.Classes.Eq CerkeFS.Internal.Board.Col
instance GHC.Show.Show CerkeFS.Internal.Board.Col
instance GHC.Show.Show CerkeFS.Internal.Board.Square

module CerkeFS.Operations
data Fullboard
Fullboard :: Board1 -> [Piece] -> Fullboard
[board] :: Fullboard -> Board1
[hand] :: Fullboard -> [Piece]

-- | An alias for the monad that represents an operation.
type Operation = StateT Fullboard (Either Error)
data Dat2

-- | 無抗行処; la als
Mun1MakMok1Hue :: Dat2

-- | 筆兵無傾; la ny anknish
Kua2Kauk2Mun1Aum1 :: Dat2

-- | 地心; la meunerfergal
Huep2Hia1 :: Dat2

-- | 行行; la nienulerless
Mok1Mok1 :: Dat2

-- | 王; la nermetixaler
Dat2AIo :: Dat2

-- | 獣; la pysess
Saup1 :: Dat2

-- | 闇戦之集; la phertarsa'd elmss
HuetKaikADat2 :: Dat2

-- | 声無行処; la ytartanerfergal
Cuop2Mun1Mok1Hue :: Dat2

-- | Moves the piece. If the destination is blocked, the piece at the
--   destination is implicitly captured.
--   
--   <ul>
--   <li><a>MovingOpponentPiece</a> is raised if the side of the moving
--   piece does not match the side given in the argument.</li>
--   <li><a>FriendlyFire</a> is raised if the destination is blocked by the
--   piece belonging to the same side as the moving piece.</li>
--   <li><a>TamCapture</a> is raised if the destination is occupied by
--   Tam2, which cannot be captured.</li>
--   </ul>
plays :: Square -> Square -> Side -> Operation (Maybe PhantomPiece)

-- | Drops the piece to the square.
--   
--   <ul>
--   <li><a>NoCorrespondingPieceInHand</a> is raised if no pieces in the
--   hand matches the condition given by the arguments.</li>
--   <li><a>AlreadyOccupied</a> is raised if the square is already occupied
--   by another piece.</li>
--   </ul>
drops :: (Color, Profession) -> Square -> Side -> Operation ()

-- | Skips a turn.
passes :: Side -> Operation ()

-- | Similar to <a>drops'</a>, but infers the color of the piece to be
--   dropped. <a>AmbiguousColor</a> is raised if the color of the piece
--   cannot be uniquely identified.
drops' :: Profession -> Square -> Side -> Operation ()

-- | Wraps an operation to show that the operation must theoretically
--   succeed but did not happen. Fails if the wrapped operation is illegal.
mun1 :: (Side -> Operation a) -> Side -> Operation ()

-- | Similar to <a>plays</a>, but also checks if the moving piece has the
--   profession specified by the argument.
plays' :: Square -> Profession -> Square -> Side -> Operation (Maybe PhantomPiece)

-- | Similar to <a>plays</a>, but also checks if the moving piece is Tam2.
playsTam :: Square -> Square -> Side -> Operation ()

-- | Declares a Dat2. Fails with <a>FalseDeclaration</a> if the condition
--   required for the declaration is not met.
declare :: Side -> Dat2 -> Operation ()

-- | Supposed to be a declaration that the game has ended, but currently is
--   just a dummy operation with no consequences.
taxot1 :: Operation ()

-- | <a>Upward</a> plays, followed by <a>Downward</a>
(>+>) :: Monad m => (Side -> m a) -> (Side -> m b) -> m b

-- | <a>Downward</a> plays, followed by <a>Upward</a>
(>->) :: Monad m => (Side -> m a) -> (Side -> m b) -> m b
instance GHC.Enum.Enum CerkeFS.Operations.Dat2
instance GHC.Classes.Ord CerkeFS.Operations.Dat2
instance GHC.Classes.Eq CerkeFS.Operations.Dat2
instance GHC.Show.Show CerkeFS.Operations.Dat2
instance GHC.Classes.Ord CerkeFS.Operations.Fullboard
instance GHC.Classes.Eq CerkeFS.Operations.Fullboard
instance GHC.Show.Show CerkeFS.Operations.Fullboard

module CerkeFS.Board2
type Board1 = Map Square Piece
data Error

-- | The square you're moving to is already occupied.
AlreadyOccupied :: Square -> Error

-- | The square you're moving from is actually empty
EmptySquare :: Square -> Error

-- | The square you're moving to is already occupied by Tam2.
TamCapture :: Error

-- | You tried to drop a piece that is not in the hand.
NoCorrespondingPieceInHand :: Error

-- | You tried to move the opponent's piece.
MovingOpponentPiece :: Error

-- | You tried to capture your own piece.
FriendlyFire :: Error

-- | Color of the dropped piece cannot be unambiguously inferred.
AmbiguousColor :: Error

-- | The actual profession differs from the expectation.
WrongProfessionSpecified :: Maybe Profession -> Maybe Profession -> Error
[expected] :: Error -> Maybe Profession
[specified] :: Error -> Maybe Profession

-- | Declares a Dat2 whose condition is not satisfied.
FalseDeclaration :: Error

-- | Tried to take a piece protected by Tam2HueAUai1
Tam2HueAUai1Violation :: Error

-- | Tried to step on an empty square
SteppingEmptySquare :: Square -> Error

-- | Trying a movement that the profession does not allow
ProfessionPrivilegeExceeded :: Profession -> Square -> Error

-- | Trying to capture a piece by Tam2
CaptureByTam :: Error

-- | Trying a movement that the Tam2 cannot do
Tam2PrivilegeExceeded :: Square -> (Maybe Square) -> Square -> Error
[_from] :: Error -> Square
[_thru] :: Error -> (Maybe Square)
[_to] :: Error -> Square
sqKA :: Square
sqLA :: Square
sqNA :: Square
sqTA :: Square
sqZA :: Square
sqXA :: Square
sqCA :: Square
sqMA :: Square
sqPA :: Square
sqKE :: Square
sqLE :: Square
sqNE :: Square
sqTE :: Square
sqZE :: Square
sqXE :: Square
sqCE :: Square
sqME :: Square
sqPE :: Square
sqKI :: Square
sqLI :: Square
sqNI :: Square
sqTI :: Square
sqZI :: Square
sqXI :: Square
sqCI :: Square
sqMI :: Square
sqPI :: Square
sqKU :: Square
sqLU :: Square
sqNU :: Square
sqTU :: Square
sqZU :: Square
sqXU :: Square
sqCU :: Square
sqMU :: Square
sqPU :: Square
sqKO :: Square
sqLO :: Square
sqNO :: Square
sqTO :: Square
sqZO :: Square
sqXO :: Square
sqCO :: Square
sqMO :: Square
sqPO :: Square
sqKY :: Square
sqLY :: Square
sqNY :: Square
sqTY :: Square
sqZY :: Square
sqXY :: Square
sqCY :: Square
sqMY :: Square
sqPY :: Square
sqKAI :: Square
sqLAI :: Square
sqNAI :: Square
sqTAI :: Square
sqZAI :: Square
sqXAI :: Square
sqCAI :: Square
sqMAI :: Square
sqPAI :: Square
sqKAU :: Square
sqLAU :: Square
sqNAU :: Square
sqTAU :: Square
sqZAU :: Square
sqXAU :: Square
sqCAU :: Square
sqMAU :: Square
sqPAU :: Square
sqKIA :: Square
sqLIA :: Square
sqNIA :: Square
sqTIA :: Square
sqZIA :: Square
sqXIA :: Square
sqCIA :: Square
sqMIA :: Square
sqPIA :: Square

-- | The list of squares, arranged in the following order:
--   <tt>[<a>sqKA</a>, <a>sqLA</a>, <a>sqNA</a> ... <a>sqCIA</a>,
--   <a>sqMIA</a>, <a>sqPIA</a>]</tt>.
sqList :: [Square]

-- | Returns whether the square is occupied
isOccupied :: Square -> Board1 -> Bool
data Square

module CerkeFS.InitialBoard

-- | Initial configuration of the cerke board.
initialBoard :: Board1

module CerkeFS.PrettyPrint

-- | Converts the ASCII board format used in the <a>Cerke board image
--   generator</a> to the <a>Board1</a>.
loadBoard :: String -> Maybe Board1

-- | Converts the <a>Board1</a> to the ASCII board format used in the
--   <a>Cerke board image generator</a>.
drawBoard :: Board1 -> String

-- | Converts the <a>Piece</a> to the ASCII format used in the <a>Cerke
--   board image generator</a>.
convertPieceToStr :: Piece -> String

module CerkeFS.VerifyDisplacement

-- | Verify whether the given displacement is allowed by the profession.
verifyDisplacement :: Side -> Profession -> Square -> Square -> Operation ()

module CerkeFS.VerifyRange

-- | Similar to <a>plays</a>, but checks whether the move is allowed by the
--   profession. Tam2 is allowed.
vPlays2 :: Square -> Square -> Side -> Operation ()

-- | Similar to <a>plays</a>, but checks whether the move is allowed by the
--   profession. Tam2 is allowed.
--   
--   The first arguments denotes the origin, the second denotes the square
--   to step on, and the third denotes the destination.
vPlays3 :: Square -> Square -> Square -> Side -> Operation ()

-- | Similar to <a>plays'</a>, but checks whether the move is allowed by
--   the profession.
--   
--   The first arguments denotes the origin, the third denotes the square
--   to step on, and the fourth denotes the destination.
vPlays3' :: Square -> Profession -> Square -> Square -> Side -> Operation ()

-- | Similar to <a>plays'</a>, but checks whether the move is allowed by
--   the profession.
vPlays2' :: Square -> Profession -> Square -> Side -> Operation ()

-- | Plays Tam2, which did not step on a piece.
--   
--   Thus, Tam2 must have visited an empty square, then to the destination.
vPlTam2 :: Square -> Square -> Side -> Operation ()

-- | Plays Tam2, which stepped on a piece.
vPlTam3 :: Square -> Square -> Square -> Side -> Operation ()

-- | An alias for the monad that represents an operation.
type Operation = StateT Fullboard (Either Error)

-- | Supposed to be a declaration that the game has ended, but currently is
--   just a dummy operation with no consequences.
taxot1 :: Operation ()

-- | Drops the piece to the square.
--   
--   <ul>
--   <li><a>NoCorrespondingPieceInHand</a> is raised if no pieces in the
--   hand matches the condition given by the arguments.</li>
--   <li><a>AlreadyOccupied</a> is raised if the square is already occupied
--   by another piece.</li>
--   </ul>
drops :: (Color, Profession) -> Square -> Side -> Operation ()

-- | Similar to <a>drops'</a>, but infers the color of the piece to be
--   dropped. <a>AmbiguousColor</a> is raised if the color of the piece
--   cannot be uniquely identified.
drops' :: Profession -> Square -> Side -> Operation ()

-- | Wraps an operation to show that the operation must theoretically
--   succeed but did not happen. Fails if the wrapped operation is illegal.
mun1 :: (Side -> Operation a) -> Side -> Operation ()

-- | Declares a Dat2. Fails with <a>FalseDeclaration</a> if the condition
--   required for the declaration is not met.
declare :: Side -> Dat2 -> Operation ()

-- | <a>Upward</a> plays, followed by <a>Downward</a>
(>+>) :: Monad m => (Side -> m a) -> (Side -> m b) -> m b

-- | <a>Downward</a> plays, followed by <a>Upward</a>
(>->) :: Monad m => (Side -> m a) -> (Side -> m b) -> m b
data Dat2

-- | 無抗行処; la als
Mun1MakMok1Hue :: Dat2

-- | 筆兵無傾; la ny anknish
Kua2Kauk2Mun1Aum1 :: Dat2

-- | 地心; la meunerfergal
Huep2Hia1 :: Dat2

-- | 行行; la nienulerless
Mok1Mok1 :: Dat2

-- | 王; la nermetixaler
Dat2AIo :: Dat2

-- | 獣; la pysess
Saup1 :: Dat2

-- | 闇戦之集; la phertarsa'd elmss
HuetKaikADat2 :: Dat2

-- | 声無行処; la ytartanerfergal
Cuop2Mun1Mok1Hue :: Dat2
data Fullboard
Fullboard :: Board1 -> [Piece] -> Fullboard
[board] :: Fullboard -> Board1
[hand] :: Fullboard -> [Piece]

-- | Generates all the possible moves. Implemented here to gain the speed
--   performance.
testAll :: Side -> Fullboard -> [Move]
data Move
Drop :: (Color, Profession) -> Square -> Move
Move2 :: Square -> Square -> Move
Move3 :: Square -> Square -> Square -> Move
instance GHC.Classes.Ord CerkeFS.VerifyRange.Move
instance GHC.Classes.Eq CerkeFS.VerifyRange.Move
instance GHC.Show.Show CerkeFS.VerifyRange.Move


-- | CerkeFS, which stands for cerke'd fedirrgavir'i slergyl, is a library
--   to check whether the given record of the game of Cerke is valid or
--   not. It should be possible to depict most valid operations with
--   functions exported from this module.
module CerkeFS

-- | Similar to <a>plays</a>, but checks whether the move is allowed by the
--   profession. Tam2 is allowed.
vPlays2 :: Square -> Square -> Side -> Operation ()

-- | Similar to <a>plays</a>, but checks whether the move is allowed by the
--   profession. Tam2 is allowed.
--   
--   The first arguments denotes the origin, the second denotes the square
--   to step on, and the third denotes the destination.
vPlays3 :: Square -> Square -> Square -> Side -> Operation ()

-- | Similar to <a>plays'</a>, but checks whether the move is allowed by
--   the profession.
--   
--   The first arguments denotes the origin, the third denotes the square
--   to step on, and the fourth denotes the destination.
vPlays3' :: Square -> Profession -> Square -> Square -> Side -> Operation ()

-- | Similar to <a>plays'</a>, but checks whether the move is allowed by
--   the profession.
vPlays2' :: Square -> Profession -> Square -> Side -> Operation ()

-- | Plays Tam2, which did not step on a piece.
--   
--   Thus, Tam2 must have visited an empty square, then to the destination.
vPlTam2 :: Square -> Square -> Side -> Operation ()

-- | Plays Tam2, which stepped on a piece.
vPlTam3 :: Square -> Square -> Square -> Side -> Operation ()

-- | An alias for the monad that represents an operation.
type Operation = StateT Fullboard (Either Error)

-- | Supposed to be a declaration that the game has ended, but currently is
--   just a dummy operation with no consequences.
taxot1 :: Operation ()

-- | Drops the piece to the square.
--   
--   <ul>
--   <li><a>NoCorrespondingPieceInHand</a> is raised if no pieces in the
--   hand matches the condition given by the arguments.</li>
--   <li><a>AlreadyOccupied</a> is raised if the square is already occupied
--   by another piece.</li>
--   </ul>
drops :: (Color, Profession) -> Square -> Side -> Operation ()

-- | Similar to <a>drops'</a>, but infers the color of the piece to be
--   dropped. <a>AmbiguousColor</a> is raised if the color of the piece
--   cannot be uniquely identified.
drops' :: Profession -> Square -> Side -> Operation ()

-- | Wraps an operation to show that the operation must theoretically
--   succeed but did not happen. Fails if the wrapped operation is illegal.
mun1 :: (Side -> Operation a) -> Side -> Operation ()

-- | Declares a Dat2. Fails with <a>FalseDeclaration</a> if the condition
--   required for the declaration is not met.
declare :: Side -> Dat2 -> Operation ()

-- | <a>Upward</a> plays, followed by <a>Downward</a>
(>+>) :: Monad m => (Side -> m a) -> (Side -> m b) -> m b

-- | <a>Downward</a> plays, followed by <a>Upward</a>
(>->) :: Monad m => (Side -> m a) -> (Side -> m b) -> m b
data Dat2

-- | 無抗行処; la als
Mun1MakMok1Hue :: Dat2

-- | 筆兵無傾; la ny anknish
Kua2Kauk2Mun1Aum1 :: Dat2

-- | 地心; la meunerfergal
Huep2Hia1 :: Dat2

-- | 行行; la nienulerless
Mok1Mok1 :: Dat2

-- | 王; la nermetixaler
Dat2AIo :: Dat2

-- | 獣; la pysess
Saup1 :: Dat2

-- | 闇戦之集; la phertarsa'd elmss
HuetKaikADat2 :: Dat2

-- | 声無行処; la ytartanerfergal
Cuop2Mun1Mok1Hue :: Dat2
data Fullboard
Fullboard :: Board1 -> [Piece] -> Fullboard
[board] :: Fullboard -> Board1
[hand] :: Fullboard -> [Piece]

-- | Initial configuration of the cerke board.
initialBoard :: Board1
initialFullBoard :: Fullboard

-- | Applies the given operation to <a>initialBoard</a>.
playFromStart :: Monad m => StateT Fullboard m a -> m Fullboard

-- | Similar to <a>playFromStart</a>, but outputs in the concise ASCII
--   format.
--   
--   <pre>
--   &gt;&gt;&gt; toDebugOutput $ do{vPlays3' sqKE  Tuk2 sqLE sqNE Downward; vPlays2' sqTAI Kauk2 sqTY Upward}
--   "_6h_5h_3h_8h_#k_8k_3k_5k_6k\n - _2k_7k_4k - _4h - _2h_7h\n_1h_1k_1h_1k_!k_1k_1h_1k_1h\n -  -  -  -  -  -  -  -  - \n -  -  -  - ^$h -  -  -  - \n -  -  - ^1k -  -  -  -  - \n^1h^1k^1h - ^!h^1k^1h^1k^1h\n^7h^2h - ^4h - ^4k - ^2k^7k\n^6k^5k^3k^8k^#h^8h^3h^5h^6h\n~~~\n\n"
--   </pre>
toDebugOutput :: Operation a2 -> String
data Move
Drop :: (Color, Profession) -> Square -> Move
Move2 :: Square -> Square -> Move
Move3 :: Square -> Square -> Square -> Move

-- | Generates all the possible moves. Implemented here to gain the speed
--   performance.
testAll :: Side -> Fullboard -> [Move]
